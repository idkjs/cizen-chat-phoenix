// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");

function reducer(state, action) {
  if (action) {
    return /* Editing */{
            _0: {
              text: action._0
            }
          };
  } else if (state) {
    return /* Fixed */0;
  } else {
    return state;
  }
}

function InPlaceEdit(Props) {
  var name = Props.name;
  var text = Props.text;
  var handleChange = Props.handleChange;
  var match = React.useReducer(reducer, /* Fixed */0);
  var dispatch = match[1];
  var state = match[0];
  var tmp;
  if (state) {
    var text$1 = state._0.text;
    tmp = React.createElement("input", {
          value: text$1,
          onKeyDown: (function ($$event) {
              if ($$event.keyCode === 13) {
                $$event.preventDefault();
                Curry._1(handleChange, text$1);
                return Curry._1(dispatch, /* Toggle */0);
              }
              
            }),
          onChange: (function ($$event) {
              return Curry._1(dispatch, /* Update */{
                          _0: $$event.target.value
                        });
            })
        });
  } else {
    tmp = React.createElement(React.Fragment, undefined, React.createElement("span", {
              className: "c-iedit-" + (name + "-content")
            }, text), React.createElement("span", {
              className: "c-iedit-" + (name + "-action"),
              onClick: (function (_event) {
                  return Curry._1(dispatch, /* Toggle */0);
                })
            }, "Edit"));
  }
  return React.createElement("div", {
              className: "c-iedit-" + name
            }, tmp);
}

var make = InPlaceEdit;

exports.reducer = reducer;
exports.make = make;
/* react Not a pure module */
