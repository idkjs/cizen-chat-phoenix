// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Phx = require("bucklescript-phx/src/phx.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Room$CizenChat = require("./Room.bs.js");
var Decode$CizenChat = require("./Decode.bs.js");
var Message$CizenChat = require("./Message.bs.js");
var RoomList$CizenChat = require("./RoomList.bs.js");
var MessageMap$CizenChat = require("./MessageMap.bs.js");
var InPlaceEdit$CizenChat = require("./InPlaceEdit.bs.js");
var MessageList$CizenChat = require("./MessageList.bs.js");
var ThemeChanger$CizenChat = require("./ThemeChanger.bs.js");

function subtract(a1, a2) {
  var l2 = $$Array.to_list(a2);
  return $$Array.of_list(List.filter(function (e) {
                    return !List.mem(e, l2);
                  })($$Array.to_list(a1)));
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* Connected */0 :
        return /* Ready */{
                _0: {
                  id: action._0,
                  name: action._1,
                  socket: action._2,
                  channel: action._3,
                  rooms: Room$CizenChat.RoomMap.empty,
                  available: [],
                  entered: [],
                  messages: MessageMap$CizenChat.MessageMap.empty,
                  text: "",
                  selected: undefined
                }
              };
    case /* RoomCreated */1 :
        var room_id = action._0;
        if (typeof state === "number") {
          return state;
        }
        var state$1 = state._0;
        return /* Ready */{
                _0: {
                  id: state$1.id,
                  name: state$1.name,
                  socket: state$1.socket,
                  channel: state$1.channel,
                  rooms: Room$CizenChat.upsertRoom(room_id, action._1, action._2, state$1.rooms),
                  available: Room$CizenChat.uniqRooms(room_id, state$1.available),
                  entered: Room$CizenChat.uniqRooms(room_id, state$1.entered),
                  messages: state$1.messages,
                  text: state$1.text,
                  selected: room_id
                }
              };
    case /* RoomEnter */2 :
        var room_id$1 = action._0;
        if (typeof state === "number") {
          return state;
        }
        var state$2 = state._0;
        Phx.push("room:enter", {
              source: state$2.id,
              room_id: room_id$1
            }, undefined, state$2.channel);
        return /* Ready */{
                _0: {
                  id: state$2.id,
                  name: state$2.name,
                  socket: state$2.socket,
                  channel: state$2.channel,
                  rooms: state$2.rooms,
                  available: state$2.available,
                  entered: Room$CizenChat.uniqRooms(room_id$1, state$2.entered),
                  messages: state$2.messages,
                  text: state$2.text,
                  selected: room_id$1
                }
              };
    case /* RoomSelect */3 :
        if (typeof state === "number") {
          return state;
        }
        var state$3 = state._0;
        return /* Ready */{
                _0: {
                  id: state$3.id,
                  name: state$3.name,
                  socket: state$3.socket,
                  channel: state$3.channel,
                  rooms: state$3.rooms,
                  available: state$3.available,
                  entered: state$3.entered,
                  messages: state$3.messages,
                  text: state$3.text,
                  selected: action._0
                }
              };
    case /* ReceiveRoomSetting */4 :
        var room_id$2 = action._0;
        if (typeof state === "number") {
          return state;
        }
        var state$4 = state._0;
        return /* Ready */{
                _0: {
                  id: state$4.id,
                  name: state$4.name,
                  socket: state$4.socket,
                  channel: state$4.channel,
                  rooms: Room$CizenChat.upsertRoom(room_id$2, action._1, action._2, state$4.rooms),
                  available: Room$CizenChat.uniqRooms(room_id$2, state$4.available),
                  entered: state$4.entered,
                  messages: state$4.messages,
                  text: state$4.text,
                  selected: state$4.selected
                }
              };
    case /* ReceiveAvatarProfile */5 :
        if (typeof state === "number") {
          return state;
        }
        var state$5 = state._0;
        return /* Ready */{
                _0: {
                  id: state$5.id,
                  name: action._1,
                  socket: state$5.socket,
                  channel: state$5.channel,
                  rooms: state$5.rooms,
                  available: state$5.available,
                  entered: state$5.entered,
                  messages: state$5.messages,
                  text: state$5.text,
                  selected: state$5.selected
                }
              };
    case /* Receive */6 :
        if (typeof state === "number") {
          return state;
        }
        var state$6 = state._0;
        return /* Ready */{
                _0: {
                  id: state$6.id,
                  name: state$6.name,
                  socket: state$6.socket,
                  channel: state$6.channel,
                  rooms: state$6.rooms,
                  available: state$6.available,
                  entered: state$6.entered,
                  messages: Message$CizenChat.addMsg(action._0, action._1, action._2, state$6.messages),
                  text: state$6.text,
                  selected: state$6.selected
                }
              };
    case /* UpdateText */7 :
        var input = action._0;
        console.log("UpdateText", input);
        if (typeof state === "number") {
          return state;
        }
        var state$7 = state._0;
        console.log("UpdateText", state$7.text);
        console.log("UpdateText_state", state$7);
        return /* Ready */{
                _0: {
                  id: state$7.id,
                  name: state$7.name,
                  socket: state$7.socket,
                  channel: state$7.channel,
                  rooms: state$7.rooms,
                  available: state$7.available,
                  entered: state$7.entered,
                  messages: state$7.messages,
                  text: input,
                  selected: state$7.selected
                }
              };
    
  }
}

function App(Props) {
  var match = React.useReducer(reducer, /* Connecting */0);
  var dispatch = match[1];
  var state = match[0];
  var sendAvatarProfile = function (name) {
    if (typeof state === "number") {
      return ;
    }
    var match = state._0;
    var id = match.id;
    Phx.push("avatar:profile", {
          source: id,
          name: name
        }, undefined, match.channel);
    return Curry._1(dispatch, {
                TAG: /* ReceiveAvatarProfile */5,
                _0: id,
                _1: name
              });
  };
  var sendRoomSetting = function (name_opt, color_opt) {
    if (typeof state === "number") {
      return ;
    }
    var match = state._0;
    var selected = match.selected;
    if (selected === undefined) {
      return ;
    }
    var rooms = match.rooms;
    var name = name_opt !== undefined ? name_opt : Room$CizenChat.getRoomName(selected, rooms);
    var color = color_opt !== undefined ? color_opt : Room$CizenChat.getRoomColor(selected, rooms);
    Phx.push("room:setting", {
          source: match.id,
          room_id: selected,
          name: name,
          color: color
        }, undefined, match.channel);
    return Curry._1(dispatch, {
                TAG: /* ReceiveRoomSetting */4,
                _0: selected,
                _1: name,
                _2: color
              });
  };
  var connect = function (param) {
    var socket = Phx.connectSocket(undefined, Phx.initSocket(undefined, "/socket"));
    var channel = Phx.initChannel("lounge:hello", undefined, socket);
    Phx.putReceive("ok", (function (res) {
            var welcome = Decode$CizenChat.welcome(res);
            return Curry._1(dispatch, {
                        TAG: /* Connected */0,
                        _0: welcome.id,
                        _1: welcome.name,
                        _2: socket,
                        _3: channel
                      });
          }), Phx.joinChannel(undefined, Phx.putOn("avatar:profile", (function (res) {
                    var match = Decode$CizenChat.profile(res);
                    return Curry._1(dispatch, {
                                TAG: /* ReceiveAvatarProfile */5,
                                _0: match.avatar_id,
                                _1: match.name
                              });
                  }), Phx.putOn("room:setting", (function (res) {
                        var match = Decode$CizenChat.setting(res);
                        return Curry._1(dispatch, {
                                    TAG: /* ReceiveRoomSetting */4,
                                    _0: match.room_id,
                                    _1: match.name,
                                    _2: match.color
                                  });
                      }), Phx.putOn("room:message", (function (res) {
                            var match = Decode$CizenChat.receive(res);
                            return Curry._1(dispatch, {
                                        TAG: /* Receive */6,
                                        _0: match.source,
                                        _1: match.room_id,
                                        _2: match.body
                                      });
                          }), channel)))));
    
  };
  React.useEffect((function () {
          connect(undefined);
          return (function (param) {
                    
                  });
        }), []);
  var handleSend = function (param) {
    if (typeof state === "number") {
      return ;
    }
    var match = state._0;
    var selected = match.selected;
    if (selected === undefined) {
      return ;
    }
    var text = match.text;
    var id = match.id;
    Phx.push("room:message", {
          source: id,
          room_id: selected,
          body: text
        }, undefined, match.channel);
    Curry._1(dispatch, {
          TAG: /* Receive */6,
          _0: id,
          _1: selected,
          _2: text
        });
    return Curry._1(dispatch, {
                TAG: /* UpdateText */7,
                _0: ""
              });
  };
  var tmp;
  if (typeof state === "number") {
    tmp = React.createElement("div", undefined, "Connecting...");
  } else {
    var match$1 = state._0;
    var selected = match$1.selected;
    var entered = match$1.entered;
    var rooms = match$1.rooms;
    tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: Room$CizenChat.roomClassName(selected, rooms)
            }, React.createElement("header", {
                  className: "c-header"
                }, "CizenChat"), React.createElement("div", {
                  className: "p-side-content"
                }, React.createElement(InPlaceEdit$CizenChat.make, {
                      name: "user",
                      text: match$1.name,
                      handleChange: (function (value) {
                          sendAvatarProfile(value);
                          
                        })
                    }), React.createElement("button", {
                      className: "c-button",
                      onClick: (function (_event) {
                          if (typeof state === "number") {
                            return ;
                          }
                          var match = state._0;
                          Phx.putReceive("ok", (function (res) {
                                  var match = Decode$CizenChat.setting(res);
                                  return Curry._1(dispatch, {
                                              TAG: /* RoomCreated */1,
                                              _0: match.room_id,
                                              _1: match.name,
                                              _2: match.color
                                            });
                                }), Phx.push("room:create", {
                                    source: match.id
                                  }, undefined, match.channel));
                          
                        })
                    }, "Create Room"), React.createElement(RoomList$CizenChat.make, {
                      title: "Available Rooms",
                      rooms: Room$CizenChat.byIds(subtract(match$1.available, entered), rooms),
                      handleSelect: (function (room) {
                          return Curry._1(dispatch, {
                                      TAG: /* RoomEnter */2,
                                      _0: room
                                    });
                        })
                    }), React.createElement(RoomList$CizenChat.make, {
                      title: "Joined Rooms",
                      rooms: Room$CizenChat.byIds(entered, rooms),
                      handleSelect: (function (room) {
                          return Curry._1(dispatch, {
                                      TAG: /* RoomSelect */3,
                                      _0: room
                                    });
                        })
                    }))), React.createElement("div", {
              className: "p-chat"
            }, React.createElement("div", {
                  className: "c-chat"
                }, selected !== undefined ? React.createElement(React.Fragment, undefined, React.createElement("div", {
                            className: "c-chat-header"
                          }, React.createElement(InPlaceEdit$CizenChat.make, {
                                name: "room-title",
                                text: Room$CizenChat.getRoomName(selected, rooms),
                                handleChange: (function (value) {
                                    sendRoomSetting(value, undefined);
                                    
                                  })
                              }), React.createElement(ThemeChanger$CizenChat.make, {
                                handleChange: (function (color) {
                                    sendRoomSetting(undefined, color);
                                    
                                  })
                              })), React.createElement(MessageList$CizenChat.make, {
                            messages: Message$CizenChat.getMsg(selected, match$1.messages)
                          })) : React.createElement("p", undefined, "Select or create a room")), React.createElement("div", {
                  className: "c-text-area-wrapper"
                }, React.createElement("div", {
                      className: "c-text-area"
                    }, React.createElement("textarea", {
                          placeholder: "What's up?",
                          rows: 1,
                          value: match$1.text,
                          onKeyDown: (function ($$event) {
                              if ($$event.keyCode === 13) {
                                $$event.preventDefault();
                                handleSend(undefined);
                                return ;
                              }
                              
                            }),
                          onChange: (function ($$event) {
                              return Curry._1(dispatch, {
                                          TAG: /* UpdateText */7,
                                          _0: $$event.target.value
                                        });
                            })
                        })))), React.createElement("div", {
              className: "p-avatars"
            }));
  }
  return React.createElement("div", {
              className: "p-container"
            }, tmp);
}

var make = App;

exports.subtract = subtract;
exports.reducer = reducer;
exports.make = make;
/* Phx Not a pure module */
