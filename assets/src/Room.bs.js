// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var compare = Caml_obj.caml_compare;

var RoomMap = $$Map.Make({
      compare: compare
    });

function uniqRooms(room_id, rooms) {
  var rooms_l = $$Array.to_list(rooms);
  if (List.mem(room_id, rooms_l)) {
    return rooms;
  } else {
    return $$Array.concat({
                hd: rooms,
                tl: {
                  hd: [room_id],
                  tl: /* [] */0
                }
              });
  }
}

function upsertRoom(room_id, name, color, rooms) {
  var room = {
    id: room_id,
    name: name,
    color: color
  };
  return Curry._3(RoomMap.add, room_id, room, rooms);
}

function getRoomName(room_id, rooms) {
  try {
    return Curry._2(RoomMap.find, room_id, rooms).name;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return "Unknown Room";
    }
    throw exn;
  }
}

function getRoomColor(room_id, rooms) {
  try {
    return Curry._2(RoomMap.find, room_id, rooms).color;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return "green";
    }
    throw exn;
  }
}

function roomClassName(room_id_opt, rooms) {
  var color;
  if (room_id_opt !== undefined) {
    try {
      color = Curry._2(RoomMap.find, room_id_opt, rooms).color;
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === "Not_found") {
        color = "green";
      } else {
        throw exn;
      }
    }
  } else {
    color = "green";
  }
  return "p-rooms p-rooms--" + color;
}

function byId(room_id, rooms) {
  try {
    return Caml_option.some(Curry._2(RoomMap.find, room_id, rooms));
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return ;
    }
    throw exn;
  }
}

function byIds(room_ids, rooms) {
  return Belt_Array.keepMap(room_ids, (function (room_id) {
                return byId(room_id, rooms);
              }));
}

exports.RoomMap = RoomMap;
exports.uniqRooms = uniqRooms;
exports.upsertRoom = upsertRoom;
exports.getRoomName = getRoomName;
exports.getRoomColor = getRoomColor;
exports.roomClassName = roomClassName;
exports.byId = byId;
exports.byIds = byIds;
/* RoomMap Not a pure module */
