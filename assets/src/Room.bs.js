// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var compare = Caml_obj.caml_compare;

var RoomMap = $$Map.Make(/* module */[/* compare */compare]);

function uniqRooms(room_id, rooms) {
  var rooms_l = $$Array.to_list(rooms);
  if (List.mem(room_id, rooms_l)) {
    return rooms;
  } else {
    return $$Array.concat(/* :: */[
                rooms,
                /* :: */[
                  /* array */[room_id],
                  /* [] */0
                ]
              ]);
  }
}

function upsertRoom(room_id, name, color, rooms) {
  var room = /* record */[
    /* id */room_id,
    /* name */name,
    /* color */color
  ];
  return Curry._3(RoomMap[/* add */3], room_id, room, rooms);
}

function getRoomName(room_id, rooms) {
  try {
    return Curry._2(RoomMap[/* find */21], room_id, rooms)[/* name */1];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return "Unknown Room";
    } else {
      throw exn;
    }
  }
}

function getRoomColor(room_id, rooms) {
  try {
    return Curry._2(RoomMap[/* find */21], room_id, rooms)[/* color */2];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return "green";
    } else {
      throw exn;
    }
  }
}

function roomClassName(room_id_opt, rooms) {
  var color;
  if (room_id_opt !== undefined) {
    try {
      color = Curry._2(RoomMap[/* find */21], room_id_opt, rooms)[/* color */2];
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        color = "green";
      } else {
        throw exn;
      }
    }
  } else {
    color = "green";
  }
  return "p-rooms p-rooms--" + color;
}

function byId(room_id, rooms) {
  try {
    return Js_primitive.some(Curry._2(RoomMap[/* find */21], room_id, rooms));
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return undefined;
    } else {
      throw exn;
    }
  }
}

function byIds(room_ids, rooms) {
  return Belt_Array.keepMap(room_ids, (function (room_id) {
                return byId(room_id, rooms);
              }));
}

exports.RoomMap = RoomMap;
exports.uniqRooms = uniqRooms;
exports.upsertRoom = upsertRoom;
exports.getRoomName = getRoomName;
exports.getRoomColor = getRoomColor;
exports.roomClassName = roomClassName;
exports.byId = byId;
exports.byIds = byIds;
/* RoomMap Not a pure module */
